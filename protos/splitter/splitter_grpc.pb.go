// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: protos/splitter/splitter.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SplitterServiceClient is the client API for SplitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitterServiceClient interface {
	CalculateDebt(ctx context.Context, in *SplitterRequest, opts ...grpc.CallOption) (*SplitterResponse, error)
}

type splitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitterServiceClient(cc grpc.ClientConnInterface) SplitterServiceClient {
	return &splitterServiceClient{cc}
}

func (c *splitterServiceClient) CalculateDebt(ctx context.Context, in *SplitterRequest, opts ...grpc.CallOption) (*SplitterResponse, error) {
	out := new(SplitterResponse)
	err := c.cc.Invoke(ctx, "/splitter.SplitterService/CalculateDebt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitterServiceServer is the server API for SplitterService service.
// All implementations must embed UnimplementedSplitterServiceServer
// for forward compatibility
type SplitterServiceServer interface {
	CalculateDebt(context.Context, *SplitterRequest) (*SplitterResponse, error)
	mustEmbedUnimplementedSplitterServiceServer()
}

// UnimplementedSplitterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSplitterServiceServer struct {
}

func (UnimplementedSplitterServiceServer) CalculateDebt(context.Context, *SplitterRequest) (*SplitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDebt not implemented")
}
func (UnimplementedSplitterServiceServer) mustEmbedUnimplementedSplitterServiceServer() {}

// UnsafeSplitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitterServiceServer will
// result in compilation errors.
type UnsafeSplitterServiceServer interface {
	mustEmbedUnimplementedSplitterServiceServer()
}

func RegisterSplitterServiceServer(s grpc.ServiceRegistrar, srv SplitterServiceServer) {
	s.RegisterService(&SplitterService_ServiceDesc, srv)
}

func _SplitterService_CalculateDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitterServiceServer).CalculateDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splitter.SplitterService/CalculateDebt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitterServiceServer).CalculateDebt(ctx, req.(*SplitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SplitterService_ServiceDesc is the grpc.ServiceDesc for SplitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SplitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "splitter.SplitterService",
	HandlerType: (*SplitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateDebt",
			Handler:    _SplitterService_CalculateDebt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/splitter/splitter.proto",
}
